// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zcubbs/grill/cmd/server/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/zcubbs/grill/cmd/server/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/zcubbs/grill/cmd/server/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BlockSession mocks base method.
func (m *MockStore) BlockSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockSession indicates an expected call of BlockSession.
func (mr *MockStoreMockRecorder) BlockSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSession", reflect.TypeOf((*MockStore)(nil).BlockSession), arg0, arg1)
}

// CreateAgent mocks base method.
func (m *MockStore) CreateAgent(arg0 context.Context, arg1 db.CreateAgentParams) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockStoreMockRecorder) CreateAgent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockStore)(nil).CreateAgent), arg0, arg1)
}

// CreateCluster mocks base method.
func (m *MockStore) CreateCluster(arg0 context.Context, arg1 db.CreateClusterParams) (db.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(db.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockStoreMockRecorder) CreateCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockStore)(nil).CreateCluster), arg0, arg1)
}

// CreateNode mocks base method.
func (m *MockStore) CreateNode(arg0 context.Context, arg1 db.CreateNodeParams) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0, arg1)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockStoreMockRecorder) CreateNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockStore)(nil).CreateNode), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// GetAgent mocks base method.
func (m *MockStore) GetAgent(arg0 context.Context, arg1 uuid.UUID) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockStoreMockRecorder) GetAgent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockStore)(nil).GetAgent), arg0, arg1)
}

// GetAgentByToken mocks base method.
func (m *MockStore) GetAgentByToken(arg0 context.Context, arg1 string) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentByToken", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentByToken indicates an expected call of GetAgentByToken.
func (mr *MockStoreMockRecorder) GetAgentByToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentByToken", reflect.TypeOf((*MockStore)(nil).GetAgentByToken), arg0, arg1)
}

// GetAllAgents mocks base method.
func (m *MockStore) GetAllAgents(arg0 context.Context) ([]db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAgents", arg0)
	ret0, _ := ret[0].([]db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAgents indicates an expected call of GetAllAgents.
func (mr *MockStoreMockRecorder) GetAllAgents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAgents", reflect.TypeOf((*MockStore)(nil).GetAllAgents), arg0)
}

// GetAllClusters mocks base method.
func (m *MockStore) GetAllClusters(arg0 context.Context) ([]db.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClusters", arg0)
	ret0, _ := ret[0].([]db.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClusters indicates an expected call of GetAllClusters.
func (mr *MockStoreMockRecorder) GetAllClusters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClusters", reflect.TypeOf((*MockStore)(nil).GetAllClusters), arg0)
}

// GetAllNodes mocks base method.
func (m *MockStore) GetAllNodes(arg0 context.Context) ([]db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNodes", arg0)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNodes indicates an expected call of GetAllNodes.
func (mr *MockStoreMockRecorder) GetAllNodes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNodes", reflect.TypeOf((*MockStore)(nil).GetAllNodes), arg0)
}

// GetAllNodesActive mocks base method.
func (m *MockStore) GetAllNodesActive(arg0 context.Context) ([]db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNodesActive", arg0)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNodesActive indicates an expected call of GetAllNodesActive.
func (mr *MockStoreMockRecorder) GetAllNodesActive(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNodesActive", reflect.TypeOf((*MockStore)(nil).GetAllNodesActive), arg0)
}

// GetAllUsers mocks base method.
func (m *MockStore) GetAllUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockStoreMockRecorder) GetAllUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockStore)(nil).GetAllUsers), arg0)
}

// GetCluster mocks base method.
func (m *MockStore) GetCluster(arg0 context.Context, arg1 uuid.UUID) (db.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(db.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockStoreMockRecorder) GetCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockStore)(nil).GetCluster), arg0, arg1)
}

// GetClusterByName mocks base method.
func (m *MockStore) GetClusterByName(arg0 context.Context, arg1 string) (db.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterByName", arg0, arg1)
	ret0, _ := ret[0].(db.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterByName indicates an expected call of GetClusterByName.
func (mr *MockStoreMockRecorder) GetClusterByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterByName", reflect.TypeOf((*MockStore)(nil).GetClusterByName), arg0, arg1)
}

// GetNode mocks base method.
func (m *MockStore) GetNode(arg0 context.Context, arg1 uuid.UUID) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0, arg1)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockStoreMockRecorder) GetNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockStore)(nil).GetNode), arg0, arg1)
}

// GetNodeByName mocks base method.
func (m *MockStore) GetNodeByName(arg0 context.Context, arg1 string) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByName", arg0, arg1)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByName indicates an expected call of GetNodeByName.
func (mr *MockStoreMockRecorder) GetNodeByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByName", reflect.TypeOf((*MockStore)(nil).GetNodeByName), arg0, arg1)
}

// GetNodesByCluster mocks base method.
func (m *MockStore) GetNodesByCluster(arg0 context.Context, arg1 uuid.UUID) ([]db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesByCluster", arg0, arg1)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesByCluster indicates an expected call of GetNodesByCluster.
func (mr *MockStoreMockRecorder) GetNodesByCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesByCluster", reflect.TypeOf((*MockStore)(nil).GetNodesByCluster), arg0, arg1)
}

// GetNodesByClusterActive mocks base method.
func (m *MockStore) GetNodesByClusterActive(arg0 context.Context, arg1 uuid.UUID) ([]db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesByClusterActive", arg0, arg1)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesByClusterActive indicates an expected call of GetNodesByClusterActive.
func (mr *MockStoreMockRecorder) GetNodesByClusterActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesByClusterActive", reflect.TypeOf((*MockStore)(nil).GetNodesByClusterActive), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetSessionByUserId mocks base method.
func (m *MockStore) GetSessionByUserId(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUserId indicates an expected call of GetSessionByUserId.
func (mr *MockStoreMockRecorder) GetSessionByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUserId", reflect.TypeOf((*MockStore)(nil).GetSessionByUserId), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// UpdateAgentLastConnection mocks base method.
func (m *MockStore) UpdateAgentLastConnection(arg0 context.Context, arg1 db.UpdateAgentLastConnectionParams) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastConnection", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentLastConnection indicates an expected call of UpdateAgentLastConnection.
func (mr *MockStoreMockRecorder) UpdateAgentLastConnection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastConnection", reflect.TypeOf((*MockStore)(nil).UpdateAgentLastConnection), arg0, arg1)
}

// UpdateCluster mocks base method.
func (m *MockStore) UpdateCluster(arg0 context.Context, arg1 db.UpdateClusterParams) (db.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(db.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockStoreMockRecorder) UpdateCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockStore)(nil).UpdateCluster), arg0, arg1)
}

// UpdateNode mocks base method.
func (m *MockStore) UpdateNode(arg0 context.Context, arg1 db.UpdateNodeParams) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", arg0, arg1)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockStoreMockRecorder) UpdateNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockStore)(nil).UpdateNode), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
