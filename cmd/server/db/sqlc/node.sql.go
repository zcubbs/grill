// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: node.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (
  name,
  cluster_id,
  is_active
) VALUES (
 $1, $2, $3
) RETURNING id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at
`

type CreateNodeParams struct {
	Name      string    `json:"name"`
	ClusterID uuid.UUID `json:"cluster_id"`
	IsActive  bool      `json:"is_active"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, createNode, arg.Name, arg.ClusterID, arg.IsActive)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Os,
		&i.Arch,
		&i.MacAddress,
		&i.Cpu,
		&i.Memory,
		&i.Disk,
		&i.ClusterID,
		&i.IsActive,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllNodes = `-- name: GetAllNodes :many
SELECT id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at FROM nodes
`

func (q *Queries) GetAllNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.Query(ctx, getAllNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.Os,
			&i.Arch,
			&i.MacAddress,
			&i.Cpu,
			&i.Memory,
			&i.Disk,
			&i.ClusterID,
			&i.IsActive,
			&i.AgentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNodesActive = `-- name: GetAllNodesActive :many
SELECT id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at FROM nodes
WHERE is_active = true
`

func (q *Queries) GetAllNodesActive(ctx context.Context) ([]Node, error) {
	rows, err := q.db.Query(ctx, getAllNodesActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.Os,
			&i.Arch,
			&i.MacAddress,
			&i.Cpu,
			&i.Memory,
			&i.Disk,
			&i.ClusterID,
			&i.IsActive,
			&i.AgentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNode = `-- name: GetNode :one
SELECT id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at FROM nodes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNode(ctx context.Context, id uuid.UUID) (Node, error) {
	row := q.db.QueryRow(ctx, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Os,
		&i.Arch,
		&i.MacAddress,
		&i.Cpu,
		&i.Memory,
		&i.Disk,
		&i.ClusterID,
		&i.IsActive,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeByName = `-- name: GetNodeByName :one
SELECT id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at FROM nodes
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetNodeByName(ctx context.Context, name string) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeByName, name)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Os,
		&i.Arch,
		&i.MacAddress,
		&i.Cpu,
		&i.Memory,
		&i.Disk,
		&i.ClusterID,
		&i.IsActive,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodesByCluster = `-- name: GetNodesByCluster :many
SELECT id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at FROM nodes
WHERE cluster_id = $1
`

func (q *Queries) GetNodesByCluster(ctx context.Context, clusterID uuid.UUID) ([]Node, error) {
	rows, err := q.db.Query(ctx, getNodesByCluster, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.Os,
			&i.Arch,
			&i.MacAddress,
			&i.Cpu,
			&i.Memory,
			&i.Disk,
			&i.ClusterID,
			&i.IsActive,
			&i.AgentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodesByClusterActive = `-- name: GetNodesByClusterActive :many
SELECT id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at FROM nodes
WHERE cluster_id = $1
AND is_active = true
`

func (q *Queries) GetNodesByClusterActive(ctx context.Context, clusterID uuid.UUID) ([]Node, error) {
	rows, err := q.db.Query(ctx, getNodesByClusterActive, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.Os,
			&i.Arch,
			&i.MacAddress,
			&i.Cpu,
			&i.Memory,
			&i.Disk,
			&i.ClusterID,
			&i.IsActive,
			&i.AgentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNode = `-- name: UpdateNode :one
UPDATE nodes
SET
  name = COALESCE($1, name),
  ip = COALESCE($2, ip),
  os = COALESCE($3, os),
  arch = COALESCE($4, arch),
  mac_address = COALESCE($5, mac_address),
  cpu = COALESCE($6, cpu),
  memory = COALESCE($7, memory),
  disk = COALESCE($8, disk),
  agent_id = COALESCE($9, agent_id),
  cluster_id = COALESCE($10, cluster_id),
  is_active = COALESCE($11, is_active),
  updated_at = current_timestamp
WHERE
  id = $12
  RETURNING id, name, ip, os, arch, mac_address, cpu, memory, disk, cluster_id, is_active, agent_id, created_at, updated_at
`

type UpdateNodeParams struct {
	Name       pgtype.Text `json:"name"`
	Ip         pgtype.Text `json:"ip"`
	Os         pgtype.Text `json:"os"`
	Arch       pgtype.Text `json:"arch"`
	MacAddress pgtype.Text `json:"mac_address"`
	Cpu        pgtype.Text `json:"cpu"`
	Memory     pgtype.Text `json:"memory"`
	Disk       pgtype.Text `json:"disk"`
	AgentID    pgtype.UUID `json:"agent_id"`
	ClusterID  pgtype.UUID `json:"cluster_id"`
	IsActive   pgtype.Bool `json:"is_active"`
	ID         uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, updateNode,
		arg.Name,
		arg.Ip,
		arg.Os,
		arg.Arch,
		arg.MacAddress,
		arg.Cpu,
		arg.Memory,
		arg.Disk,
		arg.AgentID,
		arg.ClusterID,
		arg.IsActive,
		arg.ID,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Os,
		&i.Arch,
		&i.MacAddress,
		&i.Cpu,
		&i.Memory,
		&i.Disk,
		&i.ClusterID,
		&i.IsActive,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
