// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: agent.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents
(name,"group",token,scopes,active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, "group", token, scopes, active, created_at, last_connection
`

type CreateAgentParams struct {
	Name   string `json:"name"`
	Group  string `json:"group"`
	Token  string `json:"token"`
	Scopes string `json:"scopes"`
	Active bool   `json:"active"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRow(ctx, createAgent,
		arg.Name,
		arg.Group,
		arg.Token,
		arg.Scopes,
		arg.Active,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Group,
		&i.Token,
		&i.Scopes,
		&i.Active,
		&i.CreatedAt,
		&i.LastConnection,
	)
	return i, err
}

const getAgent = `-- name: GetAgent :one
SELECT id, name, "group", token, scopes, active, created_at, last_connection FROM agents WHERE id = $1
`

func (q *Queries) GetAgent(ctx context.Context, id uuid.UUID) (Agent, error) {
	row := q.db.QueryRow(ctx, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Group,
		&i.Token,
		&i.Scopes,
		&i.Active,
		&i.CreatedAt,
		&i.LastConnection,
	)
	return i, err
}

const getAgentByToken = `-- name: GetAgentByToken :one
SELECT id, name, "group", token, scopes, active, created_at, last_connection FROM agents WHERE token = $1
`

func (q *Queries) GetAgentByToken(ctx context.Context, token string) (Agent, error) {
	row := q.db.QueryRow(ctx, getAgentByToken, token)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Group,
		&i.Token,
		&i.Scopes,
		&i.Active,
		&i.CreatedAt,
		&i.LastConnection,
	)
	return i, err
}

const getAllAgents = `-- name: GetAllAgents :many
SELECT id, name, "group", token, scopes, active, created_at, last_connection FROM agents
ORDER BY name
`

func (q *Queries) GetAllAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.db.Query(ctx, getAllAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Agent{}
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Group,
			&i.Token,
			&i.Scopes,
			&i.Active,
			&i.CreatedAt,
			&i.LastConnection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
